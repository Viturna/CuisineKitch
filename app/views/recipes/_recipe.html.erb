<div class="container pt-5">
  <div id="<%= dom_id recipe %>" class="row grid">
    <div class="col-md-5">
      <img src="<%= recipe.image %>">
      <div class="d-flex align-items-center justify-content-between col">
        <h2 class="py-4 d-inline-block">Ingrédients</h2>
        <div id="personCount" class="person-count-container d-inline-block ml-4">
          <div class="person-count-controls">
            <button id="minusBtn">-</button>
            <input type="text" id="personInput" value="<%= recipe.nbperson %>" min="1" max="25" readonly>
            <span>personnes</span>
            <button id="plusBtn">+</button>
          </div>
        </div>
      </div>
      <% recipe.recipe_ingredients.each do |recipe_ingredient| %>
        <% if recipe_ingredient.quantity.present? %>
          <div class="ingredients mt-3">
            <div class="ingredient d-flex align-items-center mb-3 py-2">
              <div class="circle">
                <span class="inner-circle">
                  <img class="ingredient-image" src="<%= recipe_ingredient.image %>">
                </span>
              </div>
              <div class="ingredient-box-text d-flex align-items-center justify-content-between col">
                <div class="left d-flex justify-content-center" style="flex-direction: column;">
                  <p class="ingredient-title"><%= recipe_ingredient.title %></p>
                </div>
                <div class="ml-auto">
                  <div style="display: flex; align-items: center;">
                    <p class="ingredient-number" data-original-quantity="<%= recipe_ingredient.quantity %>">
                      <%= recipe_ingredient.quantity.to_f %>
                    </p>
                    <p class="ingredient-unity" style="margin-left: 5px;"><%= recipe_ingredient.unity %></p>
                  </div>
                </div>
              </div>
            </div>
          </div>
        <% end %>
      <% end %>
    </div>
    <div class="col-md-1"></div>
    <div class="col-md-6">
      <p class="date-crea">Recette créée le <%= l(recipe.created_at, format: "%d %B %Y") %></p>
      <h1><%= recipe.title %></h1>
      <div class="flex-tag d-flex py-2">
        <% recipe.categories.each do |category| %>
          <div class="tag d-flex align-items-center justify-content-center">
            <p class="tag-text my-3 mx-3"><%= category.title %></p>
          </div>
        <% end %>
      </div>
      <div class="row py-4">
        <p><%= recipe.description %></p>
      </div>
      <div class="row py-2">
        <div class="col-md-3">
          <p>Temps total</p>
          <p><strong><%= total_time(recipe) %>min</strong></p>
        </div>
        <div class="col-md-3">
          <p>Préparation</p>
          <p><strong><%= preparation_time = recipe.preparationtime ? recipe.preparationtime.min : 0 %>min</strong></p>
        </div>
        <div class="col-md-3">
          <p>Cuisson</p>
          <p><strong><%= cooking_time = recipe.cookingtime ? recipe.cookingtime.min : 0 %>min</strong></p>
        </div>
        <div class="col-md-3">
          <p>Repos</p>
          <p><strong><%= resting_time = recipe.restingtime ? recipe.restingtime.min : 0 %>min</strong></p>
        </div>
      </div>
      <h2>A savoir avant de commencer</h2>
      <div class="col py-4 d-flex flex-column flex-md-row">
        <div class="info-box d-flex align-items-center" style="flex-direction: column; margin-right: 3rem !important;">
          <svg width="45" height="52" viewBox="0 0 45 52" fill="none" xmlns="http://www.w3.org/2000/svg">
            <g clip-path="url(#clip0_184_219)">
              <path d="M22.4139 20.8043C28.154 20.8043 32.8072 16.151 32.8072 10.4109C32.8072 4.67084 28.154 0.0175781 22.4139 0.0175781C16.6738 0.0175781 12.0205 4.67084 12.0205 10.4109C12.0205 16.151 16.6738 20.8043 22.4139 20.8043Z" fill="#FFCC4D"/>
              <path d="M44.4998 41.8499C41.3818 32.236 32.2876 26 22.4139 26C12.5402 26 3.446 32.236 0.327993 41.8499C-0.451509 44.1884 -0.191674 46.7867 1.36733 48.8654C2.92633 50.6842 5.26484 51.9834 7.60334 51.9834H36.9646C39.5629 51.9834 41.9014 50.6842 43.4604 48.6056C45.0194 46.5269 45.2793 44.1884 44.4998 41.8499Z" fill="#FA9B6B"/>
              <path d="M32.8074 10.4109C32.8074 4.69459 28.1304 0.0175781 22.4141 0.0175781V20.8043C28.1304 20.8043 32.8074 16.1273 32.8074 10.4109Z" fill="#FFAC33"/>
              <path d="M43.4606 48.6056C45.0196 46.5269 45.2795 43.9285 44.4999 41.59C41.3819 32.236 32.2878 26 22.4141 26V51.9834H37.2246C39.5631 51.9834 41.9016 50.6842 43.4606 48.6056Z" fill="#F98246"/>
            </g>
          </svg>
          <p class="py-3" style="margin-bottom:0px;"><%= recipe.nbperson %></p>
        </div>
        <div class="info-box d-flex align-items-center mx-5" style="flex-direction: column;">
          <svg width="52" height="52" viewBox="0 0 52 52" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M8 32.44V40H44V32.44C48.7787 30.5627 52 25.9253 52 20.6667C52 13.6827 46.3173 8 39.3333 8C38.8133 8 38.3093 8.02933 37.8133 8.088C35.9467 3.304 31.256 0 26 0C20.744 0 16.0533 3.304 14.1867 8.088C13.6907 8.02933 13.1867 8 12.6667 8C5.68267 8 0 13.6827 0 20.6667C0 25.9253 3.22133 30.5627 8 32.44ZM29.3333 20.6667C29.3333 19.5627 30.2293 18.6667 31.3333 18.6667C32.4373 18.6667 33.3333 19.5627 33.3333 20.6667V31.3333C33.3333 32.4373 32.4373 33.3333 31.3333 33.3333C30.2293 33.3333 29.3333 32.4373 29.3333 31.3333V20.6667ZM18.6667 20.6667C18.6667 19.5627 19.5627 18.6667 20.6667 18.6667C21.7707 18.6667 22.6667 19.5627 22.6667 20.6667V31.3333C22.6667 32.4373 21.7707 33.3333 20.6667 33.3333C19.5627 33.3333 18.6667 32.4373 18.6667 31.3333V20.6667ZM44 44V44.6667C44 48.712 40.712 52 36.6667 52H15.3333C11.288 52 8 48.712 8 44.6667V44H44Z" fill="#F06D36"/>
          </svg>
          <p class="py-3" style="margin-bottom:0px;"><%= recipe.difficulty %></p>
        </div>
        <div class="info-box d-flex align-items-center mx-5" style="flex-direction: column;">
          <svg width="52" height="52" viewBox="0 0 52 52" fill="none" xmlns="http://www.w3.org/2000/svg">
            <path d="M26 0C20.8577 0 15.8309 1.52487 11.5552 4.38179C7.27951 7.23871 3.94702 11.2993 1.97914 16.0502C0.0112656 20.8011 -0.503621 26.0288 0.499594 31.0723C1.50281 36.1158 3.97907 40.7486 7.61523 44.3848C11.2514 48.0209 15.8842 50.4972 20.9277 51.5004C25.9712 52.5036 31.1989 51.9887 35.9498 50.0209C40.7007 48.053 44.7613 44.7205 47.6182 40.4448C50.4751 36.1691 52 31.1423 52 26C52 19.1044 49.2607 12.4912 44.3848 7.61522C39.5088 2.73928 32.8956 0 26 0ZM31.2 20.8C31.6597 20.8 32.1006 20.9826 32.4257 21.3077C32.7507 21.6327 32.9333 22.0736 32.9333 22.5333C32.9333 22.993 32.7507 23.4339 32.4257 23.759C32.1006 24.084 31.6597 24.2667 31.2 24.2667H22.5333V27.7333H31.2C31.6597 27.7333 32.1006 27.9159 32.4257 28.241C32.7507 28.5661 32.9333 29.007 32.9333 29.4667C32.9333 29.9264 32.7507 30.3673 32.4257 30.6923C32.1006 31.0174 31.6597 31.2 31.2 31.2H22.8453C23.2029 32.2115 23.8647 33.0876 24.7398 33.7082C25.6149 34.3289 26.6605 34.6636 27.7333 34.6667H31.2C31.6597 34.6667 32.1006 34.8493 32.4257 35.1743C32.7507 35.4994 32.9333 35.9403 32.9333 36.4C32.9333 36.8597 32.7507 37.3006 32.4257 37.6256C32.1006 37.9507 31.6597 38.1333 31.2 38.1333H27.7333C25.7354 38.1337 23.7987 37.4438 22.251 36.1804C20.7033 34.9169 19.6396 33.1576 19.24 31.2H17.3333C16.8736 31.2 16.4328 31.0174 16.1077 30.6923C15.7826 30.3673 15.6 29.9264 15.6 29.4667C15.6 29.007 15.7826 28.5661 16.1077 28.241C16.4328 27.9159 16.8736 27.7333 17.3333 27.7333H19.0667V24.2667H17.3333C16.8736 24.2667 16.4328 24.084 16.1077 23.759C15.7826 23.4339 15.6 22.993 15.6 22.5333C15.6 22.0736 15.7826 21.6327 16.1077 21.3077C16.4328 20.9826 16.8736 20.8 17.3333 20.8H19.24C19.6396 18.8424 20.7033 17.083 22.251 15.8196C23.7987 14.5562 25.7354 13.8663 27.7333 13.8667H31.2C31.6597 13.8667 32.1006 14.0493 32.4257 14.3743C32.7507 14.6994 32.9333 15.1403 32.9333 15.6C32.9333 16.0597 32.7507 16.5006 32.4257 16.8256C32.1006 17.1507 31.6597 17.3333 31.2 17.3333H27.7333C26.6605 17.3363 25.6149 17.6711 24.7398 18.2918C23.8647 18.9124 23.2029 19.7885 22.8453 20.8H31.2Z" fill="#FFCA01"/>
          </svg>
          <p class="py-3" style="margin-bottom:0px;"><%= recipe.price %></p>
        </div>
      </div>
      <h2>Recette</h2>
      <div class="flex">
        <% (1..10).each do |step_number| %>
          <% step_content = recipe.send("step#{step_number}") %>
          <% if step_content.present? %>
            <div class="step d-flex align-items-center mb-3 py-2">
              <div class="circle">
                <span class="inner-circle">
                  <p class="inner-circle dark" style="margin-bottom:0"><%= step_number %></p>
                </span>
              </div>
              <div class="ingredient-box-text d-flex align-items-center justify-content-between col">
                <div class="left d-flex justify-content-center" style="flex-direction: column;">
                  <p class="ingredient-title"><%= step_content %></p>
                </div>
              </div>
            </div>
          <% end %>
        <% end %>
      </div>
    </div>
  </div>

    <%= link_to "Modifier", edit_recipe_path(@recipe),  class: "btn btn-outline-dark btn-custom" %>
</div>
<script>
  (function() {
    const plusBtn = document.getElementById('plusBtn');
    const minusBtn = document.getElementById('minusBtn');
    const personInput = document.getElementById('personInput');
    const initialNumberOfPeople = parseInt(personInput.value);

    function updateIngredientQuantities() {
      const ingredientsQuantities = document.querySelectorAll('.ingredient-number');
      const newNumberOfPeople = parseInt(personInput.value);

      ingredientsQuantities.forEach(function(ingredientQuantityElement) {
        const originalQuantity = parseFloat(ingredientQuantityElement.dataset.originalQuantity);
        const newQuantity = (originalQuantity * newNumberOfPeople) / initialNumberOfPeople; // Produit en croix
        ingredientQuantityElement.textContent = newQuantity % 1 === 0 ? newQuantity.toFixed(0) : newQuantity.toFixed(2).replace(/\.?0+$/, '');
      });
    }

    plusBtn.addEventListener('click', function() {
      if (parseInt(personInput.value) < 25) {
        personInput.value = parseInt(personInput.value) + 1;
        updateIngredientQuantities();
      }
    });

    minusBtn.addEventListener('click', function() {
      if (parseInt(personInput.value) > 1) {
        personInput.value = parseInt(personInput.value) - 1;
        updateIngredientQuantities();
      }
    });

    // Contrôler la saisie pour s'assurer que la valeur reste entre 1 et 25
    personInput.addEventListener('input', function() {
      const value = parseInt(personInput.value);
      if (isNaN(value) || value < 1) {
        personInput.value = 1;
      } else if (value > 25) {
        personInput.value = 25;
      }
      updateIngredientQuantities();
    });

    updateIngredientQuantities();
  })();
</script>
